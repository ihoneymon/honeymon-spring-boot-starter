= Spring Boot 시작하기
honeymon, <ihoneymon@gmail.com>
v0.0.1, 2018/01/21

:s-b: 스프링 부트
:app: 애플리케이션
:maven: 메이븐
:gradle: 그레이들

////
갑작스런 **완수형(Helly)**이 스프링부트를 알려달라는 이야기를 해서 급히 준비를 했습니다. {s-b}를 처음 사용하시는 분에게 어떻게 소개를 할지를 고민하고 있습니다.
////

[[s-b-intro]]
== {s-b} 소개
****
스프링 기반의 애플리케이션을 개발부터 운영까지 빠르게 진행할 수 있는 개발플랫폼

* JVM 기반 언어 Java, Kotlin 과 Groovy 지원
* 빌드도구: {maven}과 {gradle}
* 쉽고 빠른 기능 추가: {s-b} 스타터
* 배포를 위한 외부 구성(External Configuration) 지원
* 운영관리를 위한 모니터링 및 관리도구 지원
****

* link:https://spring.io/blog/2014/04/01/spring-boot-1-0-ga-released[2014/04/01 Spring Boot 1.0 GA 출시(https://goo.gl/qvPScn)]
* 그 이후 꾸준하게 버전업을 하면서 link:https://github.com/spring-projects/spring-boot/wiki/Spring-Boot-2.0-Release-Notes[2.0.0 RC(2018/01/19)]까지 진행중
* 곧! {s-b} 2.0.0.RELEASE 출시예정(JDK9, Spring 5(Reactive, WebFlux) 지원)
** 현재 버전 link:https://projects.spring.io/spring-boot/[1.5.9.RELEASE]

{s-b}는 새로운 버전이 출시될 때마다 지원하는 라이브러리의 버전들도 함께 갱신된다. 이에 대한 정보는 link:https://github.com/spring-projects/spring-boot/tree/master/spring-boot-project/spring-boot-dependencies[`spring-boot-dependencies`(https://goo.gl/wKCxQ1)]를 살펴보면 된다.

.BOM(Bill of Materials)
****
{s-b} 배포시 사용하는 3rd Party 라이브러리의 버전을 함께 관리해야하는데 이와 관련된 기능을 **BOM** 이라고 설명하고 있다.

link:https://github.com/spring-projects/spring-boot/tree/master/spring-boot-project/spring-boot-dependencies[spring-boot-dependencies(https://goo.gl/wKCxQ1)]에서 일괄관리
****


[[s-b-configuration]]
== {s-b} 구성
****
Spring Boot = BuildTools(Maven, Gradle) (Spring Boot Plugin + Spring + Auto Configuration + Starter)
****

* link:https://github.com/spring-projects/spring-boot/tree/master/spring-boot-project[`spring-boot-project` - Github(https://goo.gl/Vkj785)]

=== Spring Boot Application 의 시작점: ``@SpringBootApplication``
* `@SpringBootApplication`: 아래 3가지 애너테이션이 조합되어 **{s-b}의 마법**이 시작되는 지점이다.
** `@EnableAutoConfiguration`
** `@ComponentScan`
** `@SpringBootConfiguration`(`@Configuration`)
* {s-b}는 XML 설정파일을 사용하지 않는다.
  * 자바 구성(Java Config) 및 애너테이션 기반으로 {app}을 구성한다.
  * ``AnnotationConfigApplicationContext``

=== 빠른 기능추가: 스타터(spring-boot-starters)
* {s-b}는 link:http://start.spring.io/[Spring Initializer]룰 통해서 사용자들이 사용하는 기술 트렌드를 관찰한다.
** Deprecated View Template: Velocity, Freemarker
** link:https://www.slideshare.net/PivotalKorea/springone-platform-recap[SpringOne 2017 Platform re:cap - 정윤진(Pivotal)(https://goo.gl/5LAspP)]

=== 자동구성(Auto-Configuration)
* 작명: ``~~AutoConfiguration``
* **관례**(Convention)를 따르는 속성값을 가지고 있는 자동설정
* link:https://docs.spring.io/spring-boot/docs/current/reference/htmlsingle/#boot-features-external-config-relaxed-binding[유연한 연결(Releaxed binding)(https://goo.gl/iPn3Wx)]

==== `@ConditonOn*` 조건처리 애너테이션
* 패키지: `org.springframework.boot.autoconfigure.condition`
  - 대표적인 조건클래스 `@ConditionOnClass`, `@ConditionOnMissingClass`, `@ConditionOnBean`, `@ConditionOnMissingBean`

=== 확장 구성(External Configuration)
* ``~Properties``
* ``@ConfigurationProperties``

==== 확장 구성을 통해 속성변경할 필요가 없는 비공개 속성이라면!
* ``@PropertiesSource``를 이용해서 ``.properties`` 파일을 읽어온다.



[[honeymon-spring-boot-starter]]
== `honeymon-spring-boot-starter`
* link:https://github.com/ihoneymon/honeymon-spring-boot-starter[`honeymon-spring-boot-starter`]:: 예제 프로젝트

link:https://docs.spring.io/spring-boot/docs/current/reference/htmlsingle/#using-boot-starter[{s-b}에서 제공하는 스타터(Starter)](https://goo.gl/AFuTqQ)) 외에도 개발자가 자신에게 필요한 구성을 자동구성(Auto-Configuration)한 스타터를 이용할 수 있다.

=== antipang-spring-boot-autoconfigure
* ``META-INF/spring.factories``: {s-b} {app} 설정
* ``AntiPangAutoConfiguration`` 와 ``AntiPangProperties`` 를 가지고 있음

=== antipang-spring-boot-starter
* Nexus 저장소에 배포를 실행할 래퍼(Wrapper) 프로젝트
* 별다른 게 없죠. @_@);


[[execute-strategy]]
== {s-b} {app} 실행전략
{s-b} {app}을 실행하는 전략은 다양하다. 배포운영하는 방법에 따라서 적절한 방식을 선택하면 된다. 이에 대해서는

=== 빌드도구 플러그인을 이용해서 실행하는 방법

[source,console]
----
//Maven
$ ./mvnw spring-boot:run
//Gradle
$ ./gradlew bootRun
----

==== 시스템속성값 (``-D{property}={value}``) 이용하기
.``build.gradle``
[source,java]
----
bootRun {
    systemProperties System.properties  // <1>
}
----
<1> ``bootRun``이 실행될 때 시스템 속성값을 JVM의 System.prpoerties 값을 사용하도록 정의

위에서 ``bootRun``의 속성을 부여하면 다음과 같이 실행하는 것이 가능함

[source,java]
----
$ ./gradlew bootRun -Dserver.port=9000
----

=== 실행가능한 Jar
{s-b}는 빌드도구를 통해 제공하는 {s-b} 플러그인을 통해 프로젝트를 재구성하여 빌드한다.
``$PROJECT_HOME/build/libs`` 디렉토리를 보면 원래 패키징된 ``{project-name}.jar.original`` 파일과 리패키징된 ``{project-name}.jar``가 있다. 두 가지 파일은 각각 ZIP 형식으로 압축을 해제해보면 어떤 구조를 하고 있는지 살펴볼 수 있다.

.``.jar.original`` 파일
[source,console]
----
.
├── application.yml
├── io
│   └── honeymon
│       └── boot
│           └── antipang
│               └── app
│                   ├── AntiPangApplication.class
│                   └── config
│                       ├── LocalAppConfig$AntiPang.class
│                       └── LocalAppConfig.class
├── META-INF
│   └── MANIFEST.MF
├── static
└── templates
----

.``.jar`` 파일
[source,console]
----
.
├── BOOT-INF
│   ├── classes
│   │   ├── application.yml
│   │   ├── io
│   │   │   └── honeymon
│   │   │       └── boot
│   │   │           └── antipang
│   │   │               └── app
│   │   │                   ├── AntiPangApplication.class
│   │   │                   └── config
│   │   │                       ├── LocalAppConfig$AntiPang.class
│   │   │                       └── LocalAppConfig.class
│   │   ├── static
│   │   └── templates
│   └── lib
│       ├── antipang-spring-boot-autoconfigure-0.0.1-SNAPSHOT.jar
│       ├── antipang-spring-boot-starter-0.0.1-SNAPSHOT.jar
│       └── 생략
├── META-INF
│   └── MANIFEST.MF
└── org
    └── springframework
        └── boot
            └── loader
                ├── archive
                │   └── Jar 파일 내부를 탐색
                ├── data
                │   └── RandomAccess...
                ├── ExecutableArchiveLauncher$1.class
                ├── ExecutableArchiveLauncher.class
                ├── jar
                │   └── Jar 파일을 읽고 접근
                ├── JarLauncher.class
                ├── LaunchedURLClassLoader$1.class
                ├── LaunchedURLClassLoader.class
                ├── Launcher.class
                ├── MainMethodRunner.class
                ├── PropertiesLauncher$1.class
                ├── PropertiesLauncher$ArchiveEntryFilter.class
                ├── PropertiesLauncher.class
                ├── PropertiesLauncher$PrefixMatchingArchiveFilter.class
                ├── util
                │   └── SystemPropertyUtils.class
                └── WarLauncher.class
----

[NOTE]
====
{s-b} 리패키징을 통해서 자바 애플리케이션을 필요한 라이브러리를 하나로 묶어서 실행가능한 jar로 묶어 배포본을 생성한다. 이렇게 생성된 배포본은 JVM이 실행가능한 환경이면 어디서든지 실행이 가능하다.

**이 부분이 {s-b}의 확장포인트!!**
어떻게 사용할 수 있을지 고민해보자.
====

[[summary]]
== 정리
{s-b}를 이용하기 위해서는,

* **{s-b} 레퍼런스**를 한번 쭈욱 읽어주시고
* {s-b} 자동구성 클래스가 모여있는 `org.springframework.boot.autoconfigure` 패키지(link:https://github.com/spring-projects/spring-boot/tree/master/spring-boot-project/spring-boot-autoconfigure[`spring-boot-autoconfigure`(https://goo.gl/ydcqY3)]를 살펴봅니다.
** 생각했던 것과는 다르게 동작하는 경우가 있다면, 추가한 스타터의 자동구성이 의도와 다르게 구성되어 있는 경우가 많음
** 그럴 때는 link:https://docs.spring.io/spring-boot/docs/current/reference/htmlsingle/#common-application-properties[{s-b} 레퍼런스=부록(공통 {app} 속성, https://goo.gl/queU1t)] 을 살펴보고 속성을 살펴봅니다.
** 간혹 문서에 나와있는 기본속성이 코드에서는 다르게 구현되어 있는 경우도 있음

== 참고문헌
* link:https://docs.spring.io/spring-boot/docs/current/reference/htmlsingle[Spring Boot Reference Guide(https://goo.gl/p2Rric)]
* link:https://github.com/snicoll-demos/spring-boot-master-auto-configuration[Master Spring Boot auto-configuration(https://goo.gl/5hwWiw)]
* link:https://www.slideshare.net/PivotalKorea/springone-platform-recap[SpringOne 2017 Platform re:cap - 정윤신(Pivotal)(https://goo.gl/5LAspP)]
* link:http://kingbbode.tistory.com/40[Spring 에서 @ConditionalOnClass, @ConditionalOnBean 사용할 때 주의할 점:: 개발노트 - kingbbode]
* link:https://docs.oracle.com/javase/8/docs/technotes/tools/windows/java.html[Launch java application(https://goo.gl/yDsPgq)]
